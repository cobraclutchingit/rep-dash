name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

# Ensure we don't have concurrent deployments to prevent conflicts
concurrency:
  group: production_deployment
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: []
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run build
        run: npm run build
        env:
          # Production variables - you would typically set these as GitHub secrets
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

      # Example deployment to Vercel - replace with your actual deployment method
      - name: Deploy to Vercel
        uses: vercel/action-deploy@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: --prod

  database-migration:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy]
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      # Optional: Run database seed (uncomment if needed)
      # - name: Run database seed
      #   run: npx prisma db seed
      #   env:
      #     DATABASE_URL: ${{ secrets.DATABASE_URL }}

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy, database-migration]
    if: always()
    steps:
      - name: Check deployment status
        id: check_status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" && "${{ needs.database-migration.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      # Example Slack notification - replace with your notification method
      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        if: always()
        with:
          payload: |
            {
              "text": "Deployment ${{ steps.check_status.outputs.status == 'success' && 'succeeded ✅' || 'failed ❌' }} for Rep Dashboard",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Deployment ${{ steps.check_status.outputs.status == 'success' && 'succeeded ✅' || 'failed ❌' }}*\n${{ github.event.repository.name }} on branch `${{ github.ref_name }}`"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n<${{ github.event.repository.html_url }}/commit/${{ github.sha }}|${{ github.sha }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Triggered by:*\n${{ github.actor }}"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Workflow"
                      },
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK